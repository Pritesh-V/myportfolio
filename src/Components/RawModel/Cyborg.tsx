/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 Cyborg.gltf 
Author: Faisal Ahmad khan (https://sketchfab.com/faisalahmadkhan67)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/futuristic-cybernet-warrior-high-detail-sci-fi-d0795b13d694424c93ca1635eb26aaa3
Title: Futuristic Cybernet Warrior High Detail Sci Fi
*/

import React, { ComponentProps, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { Material, Mesh } from 'three'
import { useFrame } from '@react-three/fiber'
import * as THREE from 'three'



type GLTFResult = GLTF & {
  nodes: {
    Warrior_Body_0: Mesh
    Warrior_Body_0_1: Mesh
    Warrior_Glass_0: Mesh
  }
  materials: {
    Body: Material
    Glass: Material
  }
}


// Optional props passed to the <group> (like position, scale, etc.)
type Props = ComponentProps<'group'>



export default function Model(props : any) {
   const group = useRef<THREE.Group>(null!)
  const { nodes, materials } = useGLTF('public/cyborgmodel/Cyborg.gltf')as unknown as GLTFResult

   useFrame((state,delta) => {
    if (group.current) {
      group.current.rotation.y += delta*0.2 // Adjust speed here
    }
  })

  
  return (
    <group ref= {group} {...props} dispose={null} >
      <group rotation={[-Math.PI / 2, 0, 0]} scale={1.827}>
        <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        
          <mesh geometry={nodes.Warrior_Body_0.geometry} material={materials.Body} />
           
          <mesh geometry={nodes.Warrior_Body_0_1.geometry} material={materials.Body} />
          <mesh geometry={nodes.Warrior_Glass_0.geometry} material={materials.Glass} >
            <meshStandardMaterial attach="material" color="rgb(20,20,20)" />
          </mesh>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/Cyborg.gltf')
